//********************************************************************
//
//  Author:        Marshal Pfluger
//
//  Project #:     four
//
//  File Name:     Program4.java
//
//  Course:        COSC 4302 Operating Systems
//
//  Due Date:      10/05/2023
//
//  Instructor:    Prof. Fred Kumi
//
//  Java Version:  17.0.8+7
//
//  Chapter:       4
//
//  Description:   This program uses multiple threads to sort a list of integers that can be provided by the user
//                 or randomly generated by the program. 
//
//********************************************************************
import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;


public class Program4 {
	
	public static void main(String[] args) {
		// Instantiate object of class to call non static methods. 
		Program4 obj = new Program4();
		// Call developer info method
		obj.developerInfo();
		// Call runDemo method
		obj.runDemo();
	}
	
//***************************************************************
//
//  Method:       runDemo (Non Static)
// 
//  Description:  The main processor method of the program
//
//  Parameters:   N/A
//
//  Returns:      N/A 
//
//**************************************************************
public void runDemo() {
	String runType;
	List<Integer> finalList = null;
	do {
		// Ask user if they want to enter numbers or generate random numbers
		printOutput("Would you like to enter numbers or generate random values?\n" +
		"Type '1' to enter your own list or type '2' to create random list: ");
		// Call userChoice and store return in runType
		runType = userChoice();
		// If user wants to enter their own numbers
		if (runType.equalsIgnoreCase("1")) {
			printOutput("Please enter the list of intergers seperated by a space");
			// Receive user input 
			String stringList = userChoice();
			// Create list of user input
			List<Integer> userList = inputParsing(stringList, 1);
			// call sortandmerge method and pass split list
			finalList = sortAndMerge(listSplitter(userList));
		}
		// If user wants to randomly generate number
	    else if(runType.equalsIgnoreCase("2")) {
	    	// Initialize numRandom variable
	    	int numRandom = 0;
	    	// Inform user to enter num of random values
	    	printOutput("Please enter the number of random integers to randomly create: ");
	    	String userInput = userChoice();
	    	// Get num of elements from user 
	    	numRandom = (inputParsing(userInput, 2)).get(0);
	    	// Create List to hold random number list.
	    	List<Integer> randomList = randomListMkr(numRandom);
	    	finalList = sortAndMerge(listSplitter(randomList));	
		}
		if (finalList != null) {
			printOutput("sortedList: " + finalList);
			printOutput("Enter '0' to exit or hit enter to re run");
			runType = userChoice();
		}
		else {
			printOutput("You have entered an invalid menu item. Please try again");
		}
	}
	while(!runType.equalsIgnoreCase("0"));
	printOutput("Thank you!\n**PROGRAM TERMINATED**");
}

//***************************************************************
//
//   Method:       sortAndMerge
//
//   Description:  handles merging and sorting
//
//   Parameters:   List<List<Integer>>
//
//   Returns:      N/A
//
//**************************************************************
public List<Integer> sortAndMerge(List<List<Integer>> splitList) {
	// Store sorted lists and pass to merge thread method
	List<Integer> firstList = sortThread(splitList.get(0));
	List<Integer> secondList = sortThread(splitList.get(1));
	return mergeThread(firstList, secondList);
}

//***************************************************************
//
//   Method:       mergeThread
//
//   Description:  handles the merge thread operations
//
//   Parameters:   List<Integer>
//
//   Returns:      List<Integer>
//
//**************************************************************
public List<Integer> mergeThread(List<Integer> first, List<Integer> second){
	// Start new thread executor pool
	ExecutorService pool = Executors.newSingleThreadExecutor();
	// Declare future to get return of thread
	Future<List<Integer>> returnList = pool.submit(new MergeThreadExecutor(first, second));
	// Initialize mergedlist
	List<Integer> mergedList = null;
	try {
		// Get return from merge thread
		mergedList = returnList.get();
	} catch (InterruptedException | ExecutionException e) {
		e.printStackTrace();
	}
	pool.shutdown();
	return mergedList;
}

//***************************************************************
//
//   Method:       sortThread
//
//   Description:  handles the sorting thread operations
//
//   Parameters:   List<Integer>
//
//   Returns:      List<Integer>
//
//**************************************************************
public List<Integer> sortThread(List<Integer> listToSort){
	// Start new thread executor pool
	ExecutorService pool = Executors.newSingleThreadExecutor();
	// Declare future to get return of thread
	Future<List<Integer>> returnList = pool.submit(new SortThreadExecutor(listToSort));
	List<Integer> sortedList = null;
	try {
		sortedList = returnList.get();
	} catch (InterruptedException | ExecutionException e) {
		e.printStackTrace();
	}
	pool.shutdown();
	return sortedList;
}

//***************************************************************
//
//  Method:       listSplitter
//
//  Description:  method splits the user list and stores both lists in a list
//
//  Parameters:   String inputLine
//
//  Returns:      List<Integer>
//
//**************************************************************
public List<List<Integer>> listSplitter(List<Integer> rootList) {
	// Initialize two dimensional list to hold the split lists
	List<List<Integer>> splitList = new ArrayList<>();
	// Hold size of root list
	int listSize = rootList.size();
	// Declare first half of split
	List<Integer> firstHalf = new ArrayList<>(rootList.subList(0, (listSize / 2)));
	// Declare second half of split
	List<Integer> secondHalf = new ArrayList<>(rootList.subList((listSize / 2), listSize));
	// Add the halves to the 2d list
	splitList.add(firstHalf);
	splitList.add(secondHalf);
	return splitList;
}

//***************************************************************
//
//  Method:       inputParsing
// 
//  Description:  method parses client package
//
//  Parameters:   String inputLine
//
//  Returns:      List<Integer>
//
//**************************************************************
public List<Integer> inputParsing(String inputLine, int inputType) {
	// Declare variable to hold user string input
	String userInput = inputLine; 
	boolean validationState = true;
	List<Integer> itemList = new ArrayList<>();
	// Loop through input parsing for each type of input from user
	do {
		if (inputType == 1) {
			validationState = true;
			// Create a list of the string the user entered
			List<String> stringList = new ArrayList<String>(Arrays.asList(userInput.split("[;,\\s]+")));
			// Create list to store parsed ints
			itemList =  new ArrayList<>();
			try {
				// Loop through string list and convert to int, store in itemList
				for(String strings : stringList) {
					itemList.add(Integer.valueOf(strings));
				}
			}
			catch (NumberFormatException e){
				printOutput("you have entered invalid input.\nYou must enter only integers seperated by spaces.\nPlease try again: ");
				userInput = userChoice();
				validationState = false;
			}
		}
		else if(inputType == 2) {
			validationState = true;
    		// Try catch to handle non number input
        	try {
            	// Receive the size of list the user wants to create
            	itemList.add(Integer.parseInt(userInput));
        	}
        	catch(NumberFormatException e){
        		// Prompt user to re-enter number
        		printOutput("Your Input was invalid.\nPlease try again: ");
        		userInput = userChoice();
        		validationState = false;
        	}
		}
	}
	while (!validationState);
	return itemList;	  
}// End inputParsing

//***************************************************************
//
//  Method:       randomListMkr
//
//  Description:  method creates list of random numbers from 1-99
//
//  Parameters:   String inputLine
//
//  Returns:      List<Integer>
//
//**************************************************************
public List<Integer> randomListMkr(int numInts){
	// Instantiate random number generator 
	Random ran = new Random();
	// Create List to hold random numbers
	List<Integer> randomList = new ArrayList<>();
	// Create a list of size numInts with random numbers
	for(int i = 0; i < numInts; i++) {
		randomList.add(ran.nextInt(99) + 1);
	}
	return randomList;
}

//***************************************************************
//
//  Method:       userChoice
//
//  Description:  gets input from user, closes scanner when program exits 
//
//  Parameters:   N/A
//
//  Returns:      String file
//
//**************************************************************	
public String userChoice() {
	String userChoice;
	// Use Scanner to receive user input
	Scanner userInput = new Scanner(System.in);
	// Store user choice
	userChoice = userInput.nextLine();
	
	// close scanner when program exits.
	if (userChoice.equalsIgnoreCase("0")) {
		userInput.close();
		}
	return userChoice;
	}

//***************************************************************
//
//  Method:       printOutput (Non Static)
// 
//  Description:  handles printing output for program2
//
//  Parameters:   String output
//
//  Returns:      N/A
//
//***************************************************************
public void printOutput(String output) {
	//Print the output to the terminal
	System.out.print("\n");
	System.out.println(output);
}//End printOutput

//***************************************************************
//
//  Method:       developerInfo (Non Static)
// 
//  Description:  The developer information method of the program
//
//  Parameters:   None
//
//  Returns:      N/A 
//
//**************************************************************
public void developerInfo(){
   System.out.println("Name:    Marshal Pfluger");
   System.out.println("Course:  COSC 4302 Operating Systems");
   System.out.println("Project: Four\n\n");
} // End of the developerInfo method
}